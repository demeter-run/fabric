# Daemon 
apiVersion: v1
kind: Namespace
metadata:
  name: demeter-daemon 
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-rs
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-rs
  namespace: demeter-daemon
automountServiceAccountToken: true
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-rs-binding
  namespace: demeter-daemon
subjects:
  - kind: ServiceAccount
    namespace: demeter-daemon
    name: kube-rs
  - kind: Group
    name: system:serviceaccounts
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: kube-rs
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  daemon.toml: |
    topic_events="events"
    topic_usage="usage"
    cluster_id = "625e6681-8a74-4454-b5ad-861b45c6a42e"
    delay_sec = 60
    mode = "full"
    db_path="test.db"

    [kafka_producer]
    "bootstrap.servers" = "redpanda.demeter-kafka.svc.cluster.local:19092"
    
    [kafka_monitor]
    "bootstrap.servers" = "redpanda.demeter-kafka.svc.cluster.local:19092"
    "group.id"= "daemon-monitor-1"
    "auto.offset.reset" = "earliest"
    
    [kafka_cache]
    "bootstrap.servers" = "redpanda.demeter-kafka.svc.cluster.local:19092"
    "group.id"= "daemon-cache-1"
    "auto.offset.reset" = "earliest"

    [prometheus]
    url = "http://prometheus:9090/api/v1"
    query_step = "1m"

    [metrics]
    addr="0.0.0.0:9946"
kind: ConfigMap
metadata:
  name: daemon-config
  namespace: demeter-daemon 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: daemon
  namespace: demeter-daemon
  labels:
    app: daemon
spec:
  selector:
    matchLabels:
      app: daemon
  template:
    metadata:
      labels:
        app: daemon
    spec:
      containers:
        - name: daemon
          image: daemon:1.0
          env:
            - name: DAEMON_CONFIG 
              value: "/fabric/config/daemon.toml"
          volumeMounts:
            - name: daemon-vol
              mountPath: /fabric/config
      volumes:
        - name: daemon-vol
          configMap:
            name: daemon-config
---
# RPC
apiVersion: v1
kind: Namespace
metadata:
  name: demeter-rpc 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rpc-config
  namespace: demeter-rpc 
data:
  rpc.toml: |
    addr="0.0.0.0:80"
    db_path="test.db"
    crds_path="/fabric/crds"
    secret="fabric@txpipe"
    topic_events="events"
    topic_usage="usage"

    [kafka_producer]
    "bootstrap.servers" = "redpanda.demeter-kafka.svc.cluster.local:19092"

    [kafka_consumer]
    "bootstrap.servers" = "redpanda.demeter-kafka.svc.cluster.local:19092"
    "group.id" = "rpc"

    [auth]
    url="https://dev-dflg0ssi.us.auth0.com"
    client_id="f6y19wTU92tkVAasM5VubeEOsDSES56X"
    client_secret="${CLIENT_SECRET}"
    audience="https://dev-dflg0ssi.us.auth0.com/api/v2/"

    [stripe]
    url = "http://api.demeter-mock.svc.cluster.local/stripe"
    api_key = "test"

    [email]
    invite_ttl_min = 15
    ses_access_key_id = "xxx"
    ses_secret_access_key = "xxx"
    ses_region = "us-west-2"
    ses_verified_email = "no-reply@demeter.run"

    [prometheus]
    addr="0.0.0.0:9946"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rpc-crds
  namespace: demeter-rpc 
data:
  cardanonodeport.json: |
    {"plan":{"0":{"dns":"demeter.run","cost":{"minimum":200,"delta":0.3}}},"options":[{"description":"mainnet - stable (9.1.1)","spec":{"network":"mainnet","version":"stable","throughputTier":"0"}},{"description":"preprod - stable (9.1.1)","spec":{"network":"preprod","version":"stable","throughputTier":"0"}},{"description":"preview - stable (9.1.1)","spec":{"network":"preview","version":"stable","throughputTier":"0"}},{"description":"vector-testnet - stable (8.7.3)","spec":{"network":"vector-testnet","version":"stable","throughputTier":"0"}},{"description":"prime-testnet - stable (8.7.3)","spec":{"network":"prime-testnet","version":"stable","throughputTier":"0"}}],"crd":{"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"name":"cardanonodeports.demeter.run"},"spec":{"group":"demeter.run","names":{"categories":["demeter-port"],"kind":"CardanoNodePort","plural":"cardanonodeports","shortNames":["cnpts"],"singular":"cardanonodeport"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".spec.network","name":"Network","type":"string"},{"jsonPath":".spec.version","name":"Version","type":"string"},{"jsonPath":".spec.throughputTier","name":"Throughput Tier","type":"string"},{"jsonPath":".status.authenticatedEndpointUrl","name":"Authenticated Endpoint URL","type":"string"},{"jsonPath":".status.authToken","name":"Auth Token","type":"string"}],"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"Auto-generated derived type for CardanoNodePortSpec via `CustomResource`","properties":{"spec":{"properties":{"authToken":{"nullable":true,"type":"string"},"network":{"type":"string"},"throughputTier":{"type":"string"},"version":{"type":"string"}},"required":["network","throughputTier","version"],"type":"object"},"status":{"nullable":true,"properties":{"authToken":{"type":"string"},"authenticatedEndpointUrl":{"type":"string"}},"required":["authToken","authenticatedEndpointUrl"],"type":"object"}},"required":["spec"],"title":"CardanoNodePort","type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc
  namespace: demeter-rpc
  labels:
    app: rpc
spec:
  selector:
    matchLabels:
      app: rpc
  template:
    metadata:
      labels:
        app: rpc
    spec:
      containers:
        - name: rpc
          image: rpc:1.0
          ports:
            - containerPort: 80
          env:
            - name: RPC_CONFIG 
              value: "/fabric/config/rpc.toml"
          volumeMounts:
            - name: rpc-vol-config
              mountPath: /fabric/config 
            - name: rpc-vol-crds
              mountPath: /fabric/crds 

      volumes:
        - name: rpc-vol-config
          configMap:
            name: rpc-config
        - name: rpc-vol-crds
          configMap:
            name: rpc-crds
---
apiVersion: v1
kind: Service
metadata:
  name: rpc 
  namespace: demeter-rpc
  labels:
    app: rpc
spec:
  selector:
    app: rpc
  type: NodePort
  ports:
    - name: rpc
      port: 80
      targetPort: 80
      nodePort: 30950
      protocol: TCP
