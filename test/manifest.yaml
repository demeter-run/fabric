# Kafka
apiVersion: v1
kind: Namespace
metadata:
  name: demeter-kafka 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: demeter-kafka
  labels:
    app: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          ports:
            - containerPort: 2181 
          env:
            - name: ZOOKEEPER_CLIENT_PORT 
              value: "2181" 
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper 
  namespace: demeter-kafka
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
  type: ClusterIP
  ports:
    - name: zookeeper
      port: 2181 
      targetPort: 2181
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: demeter-kafka
  labels:
    app: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:latest
          ports:
            - containerPort: 9092 
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT 
              value: "zookeeper.demeter-kafka.svc.cluster.local:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP 
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
          # lifecycle:
          #   postStart:
          #     exec:
          #       command: ["/bin/sh", "-c", "kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic events"]

---
apiVersion: v1
kind: Service
metadata:
  name: kafka 
  namespace: demeter-kafka
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  type: ClusterIP
  ports:
    - name: kafka
      port: 9092 
      targetPort: 9092
      protocol: TCP
---

# Daemon 
apiVersion: v1
kind: Namespace
metadata:
  name: demeter-daemon 
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-rs
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-rs
  namespace: demeter-daemon
automountServiceAccountToken: true
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-rs-binding
  namespace: demeter-daemon
subjects:
  - kind: ServiceAccount
    namespace: demeter-daemon
    name: kube-rs
roleRef:
  kind: ClusterRole
  name: kube-rs
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  daemon.toml: |
    kafka_host="kafka.demeter-kafka.svc.cluster.local:9092"
kind: ConfigMap
metadata:
  name: daemon-config
  namespace: demeter-daemon 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: daemon
  namespace: demeter-daemon
  labels:
    app: daemon
spec:
  selector:
    matchLabels:
      app: daemon
  template:
    metadata:
      labels:
        app: daemon
    spec:
      containers:
        - name: daemon
          image: daemon:1.0
          env:
            - name: DAEMON_CONFIG 
              value: "/fabric/daemon.toml"
          volumeMounts:
            - name: daemon-vol
              mountPath: /fabric 
      volumes:
        - name: daemon-vol
          configMap:
            name: daemon-config
---

# RPC
apiVersion: v1
kind: Namespace
metadata:
  name: demeter-rpc 
---
apiVersion: v1
data:
  rpc.toml: |
    addr="0.0.0.0:80"
    db_path="test.db"
    kafka_host="kafka.demeter-kafka.svc.cluster.local:9092"
kind: ConfigMap
metadata:
  name: rpc-config
  namespace: demeter-rpc 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpc
  namespace: demeter-rpc
  labels:
    app: rpc
spec:
  selector:
    matchLabels:
      app: rpc
  template:
    metadata:
      labels:
        app: rpc
    spec:
      containers:
        - name: rpc
          image: rpc:1.0
          ports:
            - containerPort: 80
          env:
            - name: RPC_CONFIG 
              value: "/fabric/rpc.toml"
          volumeMounts:
            - name: rpc-vol
              mountPath: /fabric 
      volumes:
        - name: rpc-vol
          configMap:
            name: rpc-config
