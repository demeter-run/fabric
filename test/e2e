#!/bin/bash

GRPCURL_VERSION="1.9.1"
AUTH0_URL="https://txpipe.us.auth0.com/oauth/token"
FABRIC_URL="rpc.demeter.run:443"
# FABRIC_URL="0.0.0.0:5000"
MAX_ATTEMPT=3
SLEEP_DURATION=3

# Download and extract grpcurl
wget "https://github.com/fullstorydev/grpcurl/releases/download/v${GRPCURL_VERSION}/grpcurl_${GRPCURL_VERSION}_linux_x86_64.tar.gz"
tar -zxvf "./grpcurl_${GRPCURL_VERSION}_linux_x86_64.tar.gz" grpcurl

# Get Auth0 access token
echo "Getting Auth0 access token"
TOKEN=$(curl --location $AUTH0_URL \
--header 'content-type: application/x-www-form-urlencoded' \
--data-urlencode "grant_type=password" \
--data-urlencode "username=e2e@txpipe.io" \
--data-urlencode "audience=demeter-api" \
--data-urlencode "scope=profile openid email" \
--data-urlencode "client_id=$CLIENT_ID" \
--data-urlencode "password=$PASSWORD" \
--data-urlencode "client_secret=$CLIENT_SECRET" | jq -r '.access_token')

if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
    echo "Error: Failed to get Auth0 access token"
    exit 1
fi

# Creating project
echo "Creating project..."
PROJECT_ID=$(./grpcurl -H "Authorization: Bearer $TOKEN" -d '{"name": "e2e project"}' $FABRIC_URL demeter.ops.v1alpha.ProjectService.CreateProject | jq -r '.id')
if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
    echo "Error: Failed to create project"
    exit 1
fi
echo "Project created: $PROJECT_ID"

sleep $SLEEP_DURATION

finish() {
    echo "Deleting project..."
    ./grpcurl \
      -H "Authorization: Bearer $TOKEN" \
      -d '{"id": "'"$PROJECT_ID"'"}' \
      $FABRIC_URL demeter.ops.v1alpha.ProjectService.DeleteProject
    echo "Project deleted"
}

create_port() {
    local kind=$1
    local spec=$2

    RESOURCE_ID=$(./grpcurl \
      -H "Authorization: Bearer $TOKEN" \
      -d "{\"project_id\": \"$PROJECT_ID\", \"kind\": \"$kind\", \"spec\": $spec}" \
      $FABRIC_URL demeter.ops.v1alpha.ResourceService.CreateResource | jq -r '.id')

    if [ -z "$RESOURCE_ID" ] || [ "$RESOURCE_ID" = "null" ]; then
        echo "Error: Failed to create resource $kind"
        finish 
        exit 1
    fi

    sleep $SLEEP_DURATION

    for attempt in $(seq 1 $MAX_ATTEMPT); do
        RESOURCE=$(./grpcurl \
          -H "Authorization: Bearer $TOKEN" \
          -d "{\"id\": \"$RESOURCE_ID\"}" \
          $FABRIC_URL demeter.ops.v1alpha.ResourceService.FetchResourcesById)

        if [[ -n "$RESOURCE" && "$RESOURCE" != "null" ]]; then
            echo "$RESOURCE"
            return 0
        else
            sleep $SLEEP_DURATION
        fi
    done

    echo "Error: $kind is not ready after $MAX_ATTEMPT attempts."
    finish 
    exit 1
}

http_port_expect() {
    local kind=$1
    local endpoint=$2
    local path=$3

    echo "Waiting for $kind to be ready"
    for attempt in $(seq 1 $MAX_ATTEMPT); do
        status_code=$(curl -o /dev/null -s -w "%{http_code}" "$endpoint/$path")
        echo "Status Code: $status_code"

        if [[ -n "$status_code" && "$status_code" -eq 200 ]]; then
            echo "$kind is ready."
            return 0
        else
            echo "$kind is not ready yet, waiting... (attempt $attempt)"
            sleep $SLEEP_DURATION
        fi
    done

    echo "Error: $kind is not ready after $MAX_ATTEMPT attempts."
    finish 
    exit 1
}

RESOURCE=$(create_port 'BlockfrostPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"operatorVersion\":\"1\"}"')
http_port_expect 'BlockfrostPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').blockfrost-m1.demeter.run" health

RESOURCE=$(create_port 'KupoPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"pruneUtxo\":true,\"operatorVersion\":\"1\"}"')
http_port_expect 'KupoPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').mainnet-v2.kupo-m1.demeter.run" health

RESOURCE=$(create_port 'OgmiosPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"version\":6}"')
http_port_expect 'OgmiosPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').mainnet-v6.ogmios-m1.demeter.run" health

finish
