#!/bin/bash

GRPCURL_VERSION="1.9.1"
CARDANO_NODE_VERSION="10.1.3"
AUTH0_URL="https://txpipe.us.auth0.com/oauth/token"
FABRIC_URL="rpc.demeter.run:443"
# FABRIC_URL="0.0.0.0:5000"
MAX_ATTEMPT=3
SLEEP_DURATION=3

# Dependencies
echo "Downloading Dependencies ..."

sudo apt update -y && sudo apt install -y socat
# postgresql-client

# Download and extract grpcurl
wget "https://github.com/fullstorydev/grpcurl/releases/download/v${GRPCURL_VERSION}/grpcurl_${GRPCURL_VERSION}_linux_x86_64.tar.gz"
tar -zxvf "./grpcurl_${GRPCURL_VERSION}_linux_x86_64.tar.gz" grpcurl

# Download and extract cardano 
wget "https://github.com/IntersectMBO/cardano-node/releases/download/${CARDANO_NODE_VERSION}/cardano-node-${CARDANO_NODE_VERSION}-linux.tar.gz"
mkdir ./cardano-node && tar -zxvf "./cardano-node-${CARDANO_NODE_VERSION}-linux.tar.gz" -C ./cardano-node
mv ./cardano-node/bin/cardano-cli .

# Get Auth0 access token
echo "Getting Auth0 access token"
TOKEN=$(curl --location $AUTH0_URL \
--header 'content-type: application/x-www-form-urlencoded' \
--data-urlencode "grant_type=password" \
--data-urlencode "username=e2e@txpipe.io" \
--data-urlencode "audience=demeter-api" \
--data-urlencode "scope=profile openid email" \
--data-urlencode "client_id=$CLIENT_ID" \
--data-urlencode "password=$PASSWORD" \
--data-urlencode "client_secret=$CLIENT_SECRET" | jq -r '.access_token')

if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
    echo "Error: Failed to get Auth0 access token"
    exit 1
fi

# Creating project
echo "Creating project..."
PROJECT_ID=$(./grpcurl -H "Authorization: Bearer $TOKEN" -d '{"name": "e2e project"}' $FABRIC_URL demeter.ops.v1alpha.ProjectService.CreateProject | jq -r '.id')
if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
    echo "Error: Failed to create project"
    exit 1
fi
echo "Project created: $PROJECT_ID"

sleep $SLEEP_DURATION

finish() {
    echo "Deleting project..."
    ./grpcurl \
      -H "Authorization: Bearer $TOKEN" \
      -d '{"id": "'"$PROJECT_ID"'"}' \
      $FABRIC_URL demeter.ops.v1alpha.ProjectService.DeleteProject
    echo "Project deleted"
}

create_port() {
    local kind=$1
    local spec=$2

    RESOURCE_ID=$(./grpcurl \
      -H "Authorization: Bearer $TOKEN" \
      -d "{\"project_id\": \"$PROJECT_ID\", \"kind\": \"$kind\", \"spec\": $spec}" \
      $FABRIC_URL demeter.ops.v1alpha.ResourceService.CreateResource | jq -r '.id')

    if [ -z "$RESOURCE_ID" ] || [ "$RESOURCE_ID" = "null" ]; then
        echo "Error: Failed to create resource $kind"
        finish 
        exit 1
    fi

    sleep $SLEEP_DURATION

    for attempt in $(seq 1 $MAX_ATTEMPT); do
        RESOURCE=$(./grpcurl \
          -H "Authorization: Bearer $TOKEN" \
          -d "{\"id\": \"$RESOURCE_ID\"}" \
          $FABRIC_URL demeter.ops.v1alpha.ResourceService.FetchResourcesById)

        if [[ -n "$RESOURCE" && "$RESOURCE" != "null" ]]; then
            echo "$RESOURCE"
            return 0
        else
            sleep $SLEEP_DURATION
        fi
    done

    echo "Error: $kind is not ready after $MAX_ATTEMPT attempts."
    finish 
    exit 1
}

http_port_expect() {
    local endpoint=$2
    local path=$3

    for attempt in $(seq 1 $MAX_ATTEMPT); do
        JSON_DATA=$(curl --location "$endpoint/$path")

        if [[ -n "$JSON_DATA" ]]; then
            echo "$JSON_DATA"
            return 0
        fi

        sleep $SLEEP_DURATION
    done

    echo "Error: $endpoint is not ready after $MAX_ATTEMPT attempts."
    finish 
    exit 1
}

node_port_expect() {
    local token=$1
    
    socat -d -d UNIX-LISTEN:node.socket,reuseaddr,fork OPENSSL:"$token.cnode-m1.demeter.run:9443",verify=1 &

    for attempt in $(seq 1 $MAX_ATTEMPT); do
        sleep $SLEEP_DURATION

        if [[ -e "node.socket" ]]; then
            JSON_DATA=$(./cardano-cli query tip --socket-path node.socket --mainnet)
            SYNC_PROGRESS=$(echo "$JSON_DATA" | jq -r '.syncProgress')
            MIN_EXPECTED_SYNC_PROGRESS="99.00"
            MAX_EXPECTED_SYNC_PROGRESS="100.00"
            
            if (( $(echo "$SYNC_PROGRESS >= $MIN_EXPECTED_SYNC_PROGRESS" | bc -l) )) && (( $(echo "$SYNC_PROGRESS <= $MAX_EXPECTED_SYNC_PROGRESS" | bc -l) )); then
                echo "$(echo "$JSON_DATA" | jq -r '.slot')"
                return 0  
            else
                echo "Error: syncProgress is not within the acceptable range of 99 to 100"
                exit 1
            fi
        fi
    done

    echo "Error: cardano node is not ready after $MAX_ATTEMPT attempts."
    finish 
    exit 1
}

echo "Start validations ..."

RESOURCE=$(create_port 'CardanoNodePort' '"{\"network\":\"mainnet\",\"version\":\"stable\",\"throughputTier\":\"0\"}"')
TOKEN=$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken')
NODE_SLOT=$(node_port_expect $TOKEN)
NODE_SLOT=$(( NODE_SLOT - 120 ))
echo "Node slot: $NODE_SLOT"

RESOURCE=$(create_port 'BlockfrostPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"operatorVersion\":\"1\"}"')
RESPONSE=http_port_expect 'BlockfrostPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').blockfrost-m1.demeter.run" "/blocks/latest"
SLOT="$(echo "$RESPONSE" | jq -r '.slot')"
echo "Blockfrost slot: $SLOT"
if (( SLOT < NODE_SLOT )); then
    echo "Error: BlockfrostPort is not in the chain tip"
    finish 
    exit 1
fi

RESOURCE=$(create_port 'KupoPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"pruneUtxo\":true,\"operatorVersion\":\"1\"}"')
http_port_expect 'KupoPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').mainnet-v2.kupo-m1.demeter.run" health

RESOURCE=$(create_port 'OgmiosPort' '"{\"network\":\"mainnet\",\"throughputTier\":\"0\",\"version\":6}"')
http_port_expect 'OgmiosPort' "https://$(echo "$(echo "$RESOURCE" | jq -r '.records[0].spec')" | jq -r '.authToken').mainnet-v6.ogmios-m1.demeter.run" health

finish
