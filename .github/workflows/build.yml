name: Build

on:
  workflow_dispatch: {}
  push:
    branches:
      - "main"
    paths:
      - "!test/**"
      - "!dist-workspace.toml"

jobs:
  build:
    continue-on-error: true

    strategy:
      matrix:
        include:
          - release_for: Linux-x86_64
            build_on: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            args: "--locked --release"

          - release_for: Linux-arm64
            build_on: ubuntu-22.04-arm
            target: "aarch64-unknown-linux-gnu"
            args: "--locked --release"

    runs-on: ${{ matrix.build_on }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release"

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install sasl dependencies
        run: sudo apt-get update && sudo apt-get install -y libsasl2-dev cmake

      - name: Run cargo build
        run: cargo build --target ${{ matrix.target }} ${{ matrix.args }}

      - name: rename binaries
        run: |
          mv target/${{ matrix.target }}/release/daemon${{ matrix.ext }} daemon-${{ matrix.release_for }}${{ matrix.ext }}
          mv target/${{ matrix.target }}/release/rpc${{ matrix.ext }} rpc-${{ matrix.release_for }}${{ matrix.ext }}
          mv target/${{ matrix.target }}/release/cli${{ matrix.ext }} backoffice-${{ matrix.release_for }}${{ matrix.ext }}

      - name: upload daemon
        uses: actions/upload-artifact@v4
        with:
          name: binaries-daemon-${{ matrix.release_for }}
          path: daemon-${{ matrix.release_for }}${{ matrix.ext }}

      - name: upload rpc 
        uses: actions/upload-artifact@v4
        with:
          name: binaries-rpc-${{ matrix.release_for }}
          path: rpc-${{ matrix.release_for }}${{ matrix.ext }}
      
      - name: upload backoffice
        uses: actions/upload-artifact@v4
        with:
          name: binaries-backoffice-${{ matrix.release_for }}
          path: backoffice-${{ matrix.release_for }}${{ matrix.ext }}

  docker:
    runs-on: ubuntu-latest
    needs: [build]

    strategy:
      matrix:
        include:
          - tags: ghcr.io/demeter-run/fabric-daemon,ghcr.io/demeter-run/fabric-daemon:${{ github.sha }}
            binary: daemon
          - tags: ghcr.io/demeter-run/fabric-rpc,ghcr.io/demeter-run/fabric-rpc:${{ github.sha }}
            binary: rpc 
          - tags: ghcr.io/demeter-run/fabric-backoffice,ghcr.io/demeter-run/fabric-backoffice:${{ github.sha }}
            binary: backoffice

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: .github/image/bin

      # Add docker layer caching to avoid doing extra computation
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      # we need to rename the artifact so that the name matches
      # the value that Docker uses for TARGET_ARCH to keep the
      # Dockerfile simple
      - name: Rename artifacts
        run: |+
          mv .github/image/bin/daemon-Linux-x86_64 .github/image/bin/daemon-Linux-amd64
          mv .github/image/bin/proxy-Linux-x86_64 .github/image/bin/rpc-Linux-amd64
          mv .github/image/bin/backoffice-Linux-x86_64 .github/image/bin/backoffice-Linux-amd64

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .github/image
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ matrix.tags }}
          build-args: BIN=${{ matrix.binary }}

